<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Website Tracking API Documentation</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;600;700&family=Fira+Code:wght@400;500&display=swap');
        
        :root {
            --primary: #FF4D00;
            --primary-dark: #CC3D00;
            --bg: #F5F5F5;
            --text: #1A1A1A;
            --border: #1A1A1A;
            --code-bg: #f5ecec;
            --sidebar-width: 250px;
            --header-height: 60px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Space Grotesk', sans-serif;
            line-height: 1.5;
            background-color: var(--bg);
            color: var(--text);
            padding-bottom: 0;
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: var(--sidebar-width);
            background: white;
            border-right: 3px solid var(--border);
            padding: 20px 0;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
        }

        .sidebar-nav {
            list-style: none;
        }

        .sidebar-nav li {
            padding: 8px 20px;
            border-left: 4px solid transparent;
        }

        .sidebar-nav li:hover {
            background: #f0f0f0;
            border-left-color: var(--primary);
        }

        .sidebar-nav a {
            color: var(--text);
            text-decoration: none;
            font-size: 0.9rem;
            display: block;
        }

        /* Main Content Styles */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            padding: 30px;
            max-width: calc(100% - var(--sidebar-width));
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
        }

        header {
            background-color: var(--primary);
            padding: 30px;
            margin-bottom: 30px;
            border: 3px solid var(--border);
            border-radius: 8px;
            transform: rotate(-0.5deg);
            box-shadow: 6px 6px 0 var(--border);
        }

        header .container {
            transform: rotate(0.5deg);
        }

        h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: white;
            margin-bottom: 8px;
        }

        header p {
            font-size: 1rem;
            color: white;
            max-width: 600px;
        }

        .content-block {
            background: white;
            border: 3px solid var(--border);
            border-radius: 8px;
            padding: 25px;
            margin-bottom: 30px;
            box-shadow: 6px 6px 0 var(--border);
            position: relative;
        }

        /* Code Block Improvements */
        .code-wrapper {
            position: relative;
        }

        .copy-button {
            position: absolute;
            top: 10px;
            right: 10px;
            background: var(--primary);
            color: white;
            border: 2px solid var(--border);
            border-radius: 4px;
            padding: 5px 10px;
            cursor: pointer;
            font-size: 0.8rem;
            display: flex;
            align-items: center;
            gap: 5px;
            transition: background-color 0.2s;
        }

        .copy-button:hover {
            background: var(--primary-dark);
        }

        pre {
            background: var(--code-bg);
            border: 3px solid var(--border);
            border-radius: 6px;
            padding: 20px;
            overflow-x: auto;
            margin: 15px 0;
            box-shadow: 4px 4px 0 var(--border);
            font-family: 'Fira Code', monospace;
            font-size: 0.9rem;
            line-height: 1.6;
        }

        /* Section Styles */
        h2 {
            font-size: 1.8rem;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 3px solid var(--border);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        h2 i {
            color: var(--primary);
        }

        h3 {
            font-size: 1.3rem;
            margin: 20px 0 15px;
            color: var(--primary-dark);
        }

        /* Table Improvements */
        .table-wrapper {
            overflow-x: auto;
            margin: 20px 0;
            border-radius: 6px;
            border: 3px solid var(--border);
        }

        table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            font-size: 0.95rem;
        }

        th, td {
            border: 2px solid var(--border);
            padding: 12px 15px;
            text-align: left;
        }

        th {
            background: var(--primary);
            color: white;
            font-weight: 600;
        }

        tr:nth-child(even) {
            background: #f8f8f8;
        }

        /* List Improvements */
        ul, ol {
            list-style-position: inside;
            margin: 15px 0;
            font-size: 0.95rem;
        }

        li {
            margin-bottom: 10px;
            padding-left: 20px;
            position: relative;
        }

        ul li::before {
            content: '•';
            color: var(--primary);
            font-weight: bold;
            position: absolute;
            left: 0;
        }

        /* Info Boxes */
        .info-box {
            background: #f8f8f8;
            border-left: 4px solid var(--primary);
            padding: 15px;
            margin: 15px 0;
            border-radius: 0 6px 6px 0;
        }

        .info-box.warning {
            border-left-color: #ffd700;
            background: #fff9e6;
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s;
                z-index: 1000;
            }

            .sidebar.active {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
                max-width: 100%;
            }

            .menu-toggle {
                display: block;
                position: fixed;
                top: 20px;
                left: 20px;
                z-index: 1001;
                background: var(--primary);
                color: white;
                padding: 10px;
                border-radius: 5px;
                cursor: pointer;
                border: 2px solid var(--border);
            }
        }

        @media (max-width: 768px) {
            .container {
                padding: 0;
            }
            
            h1 {
                font-size: 2rem;
            }

            .content-block {
                padding: 20px;
            }

            pre {
                padding: 15px;
                font-size: 0.85rem;
            }
        }

        @media (max-width: 480px) {
            h1 {
                font-size: 1.75rem;
            }

            header {
                padding: 20px;
            }

            .main-content {
                padding: 20px;
            }

            .content-block {
                padding: 15px;
            }
        }

        #scroll-top {
            position: fixed;
            bottom: 30px;
            right: 30px;
            background: var(--primary);
            color: white;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            border: 2px solid var(--border);
            box-shadow: 3px 3px 0 var(--border);
            opacity: 0;
            transition: opacity 0.3s;
        }

        #scroll-top.visible {
            opacity: 1;
        }
    </style>
</head>
<body>
    <button class="menu-toggle">
        <i class="fas fa-bars"></i>
    </button>

    <nav class="sidebar">
        <ul class="sidebar-nav">
            <li><a href="#introduction">Introduction</a></li>
            <li><a href="#quick-start">Quick Start</a></li>
            <li><a href="#installation">Installation</a></li>
            <li><a href="#configuration">Configuration</a></li>
            <li><a href="#endpoints">Endpoints</a></li>
            <li><a href="#request-headers">Request Headers</a></li>
            <li><a href="#request-structure">Request Structure</a></li>
            <li><a href="#implementation">Implementation</a></li>
            <li><a href="#response-format">Response Format</a></li>
            <li><a href="#error-handling">Error Handling</a></li>
            <li><a href="#best-practices">Best Practices</a></li>
            <li><a href="#troubleshooting">Troubleshooting</a></li>
            <li><a href="donate">Donate</a></li>
        </ul>
    </nav>

    <main class="main-content">
        <header>
            <div class="container">
                <h1>Website Tracking API</h1>
                <p>Complete documentation for tracking website visitors using Cloudflare Workers and Telegram integration</p>
            </div>
        </header>

        <div class="container">
            <div id="introduction" class="content-block">
                <h2><i class="fas fa-book"></i> Introduction</h2>
                <p>The Website Tracking API provides a robust solution for monitoring website visitors in real-time. This documentation will guide you through the setup process and explain how to integrate the tracking system with your website.</p>
                
                <div class="info-box">
                    <strong>Key Features:</strong>
                    <ul>
                        <li>Real-time visitor tracking</li>
                        <li>Detailed visitor information collection</li>
                        <li>Telegram notifications</li>
                        <li>Easy integration with any website</li>
                        <li>Cloudflare Workers implementation</li>
                    </ul>
                </div>
            </div>

            <div id="quick-start" class="content-block">
                <h2><i class="fas fa-rocket"></i> Quick Start</h2>
                <p>Get started with the Website Tracking API in three simple steps:</p>
                
                <ol>
                    <li>Set up a Cloudflare Worker</li>
                    <li>Configure your Telegram bot</li>
                    <li>Implement the tracking code on your website</li>
                </ol>

                <div class="info-box warning">
                    <strong>Note:</strong> Make sure to replace the placeholder Telegram bot token and chat ID with your own values.
                </div>
            </div>

            <div id="installation" class="content-block">
                <h2><i class="fas fa-download"></i> Installation</h2>
                <h3>Cloudflare Workers Code</h3>
                <div class="code-wrapper">
                    <button class="copy-button" onclick="copyCode(this)">
                        <i class="fas fa-copy"></i> Copy
                    </button>
                    <pre><code class="language-javascript">const TELEGRAM_BOT_TOKEN = '7005358836:AAHLsEFJO5gINrTOyjILq72z9Kr-lkmGd30';
const TELEGRAM_CHAT_ID = '1240372408';

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  if (request.method === 'OPTIONS') {
    return new Response(null, {
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET',
        'Access-Control-Allow-Headers': 'Content-Type, X-Visitor-Info',
      },
    });
  }

  try {
    const visitorInfo = JSON.parse(request.headers.get('X-Visitor-Info') || '{}');
    const ip = request.headers.get('CF-Connecting-IP') || 'Unknown';
    const country = request.headers.get('CF-IPCountry') || 'Unknown';
    const city = request.headers.get('CF-IPCity') || 'Unknown';
    
    const message = `🔔 New Website Visitor!\n\n` +
                   `📱 Browser: ${visitorInfo.browser}\n` +
                   `💻 OS: ${visitorInfo.operatingSystem}\n` +
                   `🖥️ Screen: ${visitorInfo.screenResolution}\n` +
                   `📍 Location: ${country}, ${city}\n` +
                   `🌐 IP: ${ip}\n` +
                   `🔗 From: ${visitorInfo.referrer}\n` +
                   `📱 Device: ${visitorInfo.isMobile ? 'Mobile' : 'Desktop'}\n` +
                   `🌍 Language: ${visitorInfo.language}\n` +
                   `⏰ Local Time: ${visitorInfo.localTime}\n` +
                   `🌐 Timezone: ${visitorInfo.timezone}\n` +
                   `📡 Connection: ${visitorInfo.connectionType}\n` +
                   `📄 Page: ${visitorInfo.currentPage}`;

    const result = await sendToTelegram(message);
    
    return new Response(JSON.stringify({ 
      status: 'success',
      telegram_response: result 
    }), {
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
    });
  } catch (error) {
    return new Response(JSON.stringify({ 
      status: 'error', 
      message: error.message,
      stack: error.stack 
    }), {
      status: 500,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
    });
  }
}

async function sendToTelegram(message) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  const body = {
    chat_id: TELEGRAM_CHAT_ID,
    text: message
  };

  const response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(body)
  });

  const responseData = await response.json();
  if (!response.ok) {
    throw new Error(`Telegram API Error: ${JSON.stringify(responseData)}`);
  }
  return responseData;
}</code></pre>
                </div>
            </div>

            <div id="configuration" class="content-block">
                <h2><i class="fas fa-cog"></i> Configuration</h2>
                <h3>Required Setup</h3>
                <ol>
                    <li>Create a Telegram bot via BotFather and get your bot token</li>
                    <li>Get your Telegram chat ID</li>
                    <li>Set up a new Cloudflare Worker</li>
                    <li>Deploy the code to your worker</li>
                </ol>

                <div class="info-box">
                    <strong>Security Note:</strong> Always keep your bot token and chat ID private. Never expose them in client-side code.
                </div>
            </div>

            <div id="endpoints" class="content-block">
                <h2><i class="fas fa-link"></i> Endpoints</h2>
                <h3>Base URL</h3>
                <div class="code-wrapper">
                    <button class="copy-button" onclick="copyCode(this)">
                        <i class="fas fa-copy"></i> Copy
                    </button>
                    <pre><code class="language-plaintext">https://track.urlkamu.workers.dev</code></pre>
                </div>
                <p>Replace with your Cloudflare Worker URL after deployment.</p>
            </div>

            <div id="request-headers" class="content-block">
                <h2><i class="fas fa-list"></i> Request Headers</h2>
                <div class="table-wrapper">
                    <table>
                        <thead>
                            <tr>
                                <th>Header</th>
                                <th>Description</th>
                                <th>Example</th>
                                <th>Required</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td><code>Content-Type</code></td>
                                <td>Data format specification</td>
                                <td><code>application/json</code></td>
                                <td>Yes</td>
                            </tr>
                            <tr>
                                <td><code>X-Visitor-Info</code></td>
                                <td>JSON string containing visitor information</td>
                                <td><code>{"browser":"Chrome",...}</code></td>
                                <td>Yes</td>
                            </tr>
                            <tr>
                                <td><code>CF-Connecting-IP</code></td>
                                <td>Auto-populated by Cloudflare</td>
                                <td><code>203.0.113.45</code></td>
                                <td>No</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <div id="request-structure" class="content-block">
                <h2><i class="fas fa-code"></i> Request Structure</h2>
                <div class="code-wrapper">
                    <button class="copy-button" onclick="copyCode(this)">
                        <i class="fas fa-copy"></i> Copy
                    </button>
                    <pre><code class="language-json">{
  "browser": "Chrome 91.0.4472.124",
  "operatingSystem": "Windows",
  "userAgent": "Mozilla/5.0...",
  "language": "en-US",
  "screenResolution": "1920x1080",
  "colorDepth": "24",
  "windowSize": "1920x955",
  "online": true,
  "connectionType": "wifi",
  "isMobile": false,
  "platform": "Win32",
  "currentPage": "/blog/article-1",
  "fullUrl": "https://example.com/blog/article-1",
  "referrer": "https://google.com",
  "timezone": "Asia/Jakarta",
  "localTime": "2/24/2024, 11:00:00 AM"
}</code></pre>
                </div>
            </div>

            <div id="implementation" class="content-block">
                <h2><i class="fas fa-code-branch"></i> Implementation</h2>
                <h3>Client-Side Integration</h3>
                <div class="code-wrapper">
                    <button class="copy-button" onclick="copyCode(this)">
                        <i class="fas fa-copy"></i> Copy
                    </button>
                    <pre><code class="language-javascript">// Function to gather visitor information
async function gatherVisitorInfo() {
    return {
        browser: navigator.userAgent,
        operatingSystem: navigator.platform,
        language: navigator.language,
        screenResolution: `${screen.width}x${screen.height}`,
        colorDepth: screen.colorDepth,
        windowSize: `${window.innerWidth}x${window.innerHeight}`,
        online: navigator.onLine,
        connectionType: navigator.connection ? navigator.connection.effectiveType : 'unknown',
        isMobile: /Mobile|Android|iOS/.test(navigator.userAgent),
        platform: navigator.platform,
        currentPage: window.location.pathname,
        fullUrl: window.location.href,
        referrer: document.referrer,
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        localTime: new Date().toLocaleString()
    };
}

// Function to track visit
async function trackVisit() {
    const visitorInfo = await gatherVisitorInfo();
    
    try {
        const response = await fetch('https://track.urlkamu.workers.dev', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-Visitor-Info': JSON.stringify(visitorInfo)
            }
        });

        const data = await response.json();
        console.log('Visit tracked:', data);
    } catch (error) {
        console.error('Tracking error:', error);
    }
}

// Track visit when page loads
document.addEventListener('DOMContentLoaded', trackVisit);</code></pre>
                </div>
            </div>

            <div id="response-format" class="content-block">
                <h2><i class="fas fa-reply"></i> Response Format</h2>
                <h3>Success Response (200 OK)</h3>
                <div class="code-wrapper">
                    <button class="copy-button" onclick="copyCode(this)">
                        <i class="fas fa-copy"></i> Copy
                    </button>
                    <pre><code class="language-json">{
  "status": "success",
  "telegram_response": {
    "ok": true,
    "result": {
      "message_id": 123,
      "chat": {
        "id": 123456789,
        "type": "private"
      }
    }
  }
}</code></pre>
                </div>

                <h3>Error Response (500)</h3>
                <div class="code-wrapper">
                    <button class="copy-button" onclick="copyCode(this)">
                        <i class="fas fa-copy"></i> Copy
                    </button>
                    <pre><code class="language-json">{
  "status": "error",
  "message": "Error details",
  "stack": "Error stack trace"
}</code></pre>
                </div>
            </div>

            <div id="error-handling" class="content-block">
                <h2><i class="fas fa-exclamation-triangle"></i> Error Handling</h2>
                <div class="info-box">
                    <p>Common errors and how to handle them:</p>
                    <ul>
                        <li>Invalid Telegram token: Verify your bot token is correct</li>
                        <li>Network errors: Implement proper retry logic</li>
                        <li>Rate limiting: Add delay between requests</li>
                        <li>Malformed data: Validate visitor info before sending</li>
                    </ul>
                </div>
            </div>

            <div id="best-practices" class="content-block">
                <h2><i class="fas fa-check-circle"></i> Best Practices</h2>
                <ul>
                    <li>Implement rate limiting to prevent abuse</li>
                    <li>Add error handling and logging</li>
                    <li>Use environment variables for sensitive data</li>
                    <li>Implement retry logic for failed requests</li>
                    <li>Regular monitoring of the worker's performance</li>
                </ul>
            </div>

            <div id="troubleshooting" class="content-block">
                <h2><i class="fas fa-bug"></i> Troubleshooting</h2>
                <div class="info-box">
                    <p>Common issues and solutions:</p>
                    <ul>
                        <li>Worker not receiving requests: Check CORS settings</li>
                        <li>Telegram messages not sending: Verify bot permissions</li>
                        <li>Missing visitor data: Check browser compatibility</li>
                        <li>Performance issues: Optimize data collection</li>
                    </ul>
                </div>
            </div>
        </div>

        <button id="scroll-top" onclick="scrollToTop()">
            <i class="fas fa-arrow-up"></i>
        </button>
    </main>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
    <script>
        // Initialize syntax highlighting
        hljs.highlightAll();

        // Copy code functionality
        function copyCode(button) {
            const pre = button.nextElementSibling;
            const code = pre.querySelector('code');
            const text = code.textContent;

            navigator.clipboard.writeText(text).then(() => {
                button.innerHTML = '<i class="fas fa-check"></i> Copied!';
                setTimeout(() => {
                    button.innerHTML = '<i class="fas fa-copy"></i> Copy';
                }, 2000);
            });
        }

        // Mobile menu toggle
        const menuToggle = document.querySelector('.menu-toggle');
        const sidebar = document.querySelector('.sidebar');
        
        menuToggle.addEventListener('click', () => {
            sidebar.classList.toggle('active');
        });

        // Close sidebar when clicking outside on mobile
        document.addEventListener('click', (e) => {
            if (window.innerWidth <= 1024 && 
                !sidebar.contains(e.target) && 
                !menuToggle.contains(e.target)) {
                sidebar.classList.remove('active');
            }
        });

        // Scroll to top button
        const scrollTopButton = document.getElementById('scroll-top');

        window.addEventListener('scroll', () => {
            if (window.pageYOffset > 300) {
                scrollTopButton.classList.add('visible');
            } else {
                scrollTopButton.classList.remove('visible');
            }
        });

        function scrollToTop() {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        }

        // Smooth scroll for anchor links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth'
                    });
                    // Close sidebar on mobile after clicking
                    if (window.innerWidth <= 1024) {
                        sidebar.classList.remove('active');
                    }
                }
            });
        });
    </script>
</body>
</html>